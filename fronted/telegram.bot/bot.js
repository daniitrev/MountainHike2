const { Telegraf, Markup } = require("telegraf");
const routes = require("../routes.json");

const bot = new Telegraf("7571523149:AAEtNlVYHS2lgq9r5uju1LzLfv975e-zpJk"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

// –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
const messages = {
  en: {
    start: "Welcome! Choose your language:",
    age: "Please select your age group:",
    fitness: "Select your fitness level:",
    length: "Preferred route length (km):",
    season: "Choose the season:",
    type: "Select the route type:",
    result: "Here is a suitable route for you:",
    languages: { ru: "–†—É—Å—Å–∫–∏–π", en: "English", kz: "“ö–∞–∑–∞“õ—à–∞" },
  },
  ru: {
    start: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    age: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
    fitness: "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
    length: "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–∫–º):",
    season: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:",
    type: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞:",
    result: "–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–∞—Å:",
    languages: { ru: "–†—É—Å—Å–∫–∏–π", en: "English", kz: "“ö–∞–∑–∞“õ—à–∞" },
  },
  kz: {
    start: "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
    age: "–ñ–∞—Å—ã“£—ã–∑–¥—ã“£ —Å–∞–Ω–∞—Ç—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
    fitness: "–î–∞–π—ã–Ω–¥—ã“õ –¥–µ“£–≥–µ–π—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
    length: "–ú–∞—Ä—à—Ä—É—Ç “±–∑—ã–Ω–¥—ã“ì—ã (–∫–º):",
    season: "–ú–µ–∑–≥—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
    type: "–ú–∞—Ä—à—Ä—É—Ç—Ç—ã“£ —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
    result: "–°—ñ–∑–≥–µ “õ–æ–ª–∞–π–ª—ã –º–∞—Ä—à—Ä—É—Ç:",
    languages: { ru: "–†—É—Å—Å–∫–∏–π", en: "English", kz: "“ö–∞–∑–∞“õ—à–∞" },
  },
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userState = {};

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.start((ctx) => {
  userState[ctx.chat.id] = { lang: "en" }; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  ctx.reply(
    messages.en.start,
    Markup.inlineKeyboard([
      [Markup.button.callback("English", "lang_en")],
      [Markup.button.callback("–†—É—Å—Å–∫–∏–π", "lang_ru")],
      [Markup.button.callback("“ö–∞–∑–∞“õ—à–∞", "lang_kz")],
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.action(/lang_(.+)/, (ctx) => {
  try {
    const lang = ctx.match[1];
    userState[ctx.chat.id].lang = lang;
    ctx.reply(
      messages[lang].age,
      Markup.inlineKeyboard([
        [Markup.button.callback("18-25", "age_18-25")],
        [Markup.button.callback("26-40", "age_26-40")],
        [Markup.button.callback("40+", "age_40+")],
      ])
    );
  } catch (error) {
    console.error("Error in lang selection:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
bot.action(/age_(.+)/, (ctx) => {
  try {
    userState[ctx.chat.id].age = ctx.match[1];
    const lang = userState[ctx.chat.id].lang;
    ctx.reply(
      messages[lang].fitness,
      Markup.inlineKeyboard([
        [Markup.button.callback("Beginner", "fitness_beginner")],
        [Markup.button.callback("Intermediate", "fitness_intermediate")],
        [Markup.button.callback("Advanced", "fitness_advanced")],
      ])
    );
  } catch (error) {
    console.error("Error in age selection:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
bot.action(/fitness_(.+)/, (ctx) => {
  try {
    userState[ctx.chat.id].fitness = ctx.match[1];
    const lang = userState[ctx.chat.id].lang;
    ctx.reply(
      messages[lang].length,
      Markup.inlineKeyboard([
        [Markup.button.callback("5-10 km", "length_5-10")],
        [Markup.button.callback("10-20 km", "length_10-20")],
        [Markup.button.callback("20+ km", "length_20+")],
      ])
    );
  } catch (error) {
    console.error("Error in fitness selection:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞
bot.action(/length_(.+)/, (ctx) => {
  try {
    userState[ctx.chat.id].length = ctx.match[1];
    const lang = userState[ctx.chat.id].lang;
    ctx.reply(
      messages[lang].season,
      Markup.inlineKeyboard([
        [Markup.button.callback("Winter", "season_winter")],
        [Markup.button.callback("Spring", "season_spring")],
        [Markup.button.callback("Summer", "season_summer")],
        [Markup.button.callback("Autumn", "season_autumn")],
      ])
    );
  } catch (error) {
    console.error("Error in length selection:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∑–æ–Ω–∞
bot.action(/season_(.+)/, (ctx) => {
  try {
    userState[ctx.chat.id].season = ctx.match[1];
    const lang = userState[ctx.chat.id].lang;
    ctx.reply(
      messages[lang].type,
      Markup.inlineKeyboard([
        [Markup.button.callback("Walking", "type_walking")],
        [Markup.button.callback("Trekking", "type_trekking")],
        [Markup.button.callback("Challenging", "type_challenging")],
      ])
    );
  } catch (error) {
    console.error("Error in season selection:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
bot.action(/type_(.+)/, (ctx) => {
  try {
    const type = ctx.match[1];
    const lang = userState[ctx.chat.id].lang;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    const filteredRoutes = routes.filter((route) => route.type === type);

    if (filteredRoutes.length > 0) {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
      const route = filteredRoutes[0];
      ctx.reply(
        `${messages[lang].result}\n\n` +
          `üìç ${route.name}\n` +
          `üìè ${route.length}\n` +
          `üóìÔ∏è ${route.season}\n\n` +
          `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ](${route.link})`,
        { parse_mode: "Markdown" }
      );
    } else {
      ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    }
  } catch (error) {
    console.error("Error in type selection:", error);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
